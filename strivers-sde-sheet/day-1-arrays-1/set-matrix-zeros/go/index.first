package main

import "fmt"

func setZeroes(matrix [][]int) {
	rows, columns := len(matrix), len(matrix[0])

	rowColumnMap := make(map[int]map[int]bool, 0)

	// Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's.
	for i := 0; i < rows; i++ {
		for j := 0; j < columns; j++ {
			if matrix[i][j] == 0 {
				if _, ok := rowColumnMap[i]; !ok {
					rowColumnMap[i] = make(map[int]bool)
				}
				rowColumnMap[i][j] = true
			}
		}
	}

	for row, column := range rowColumnMap {
		for i := 0; i < columns; i++ {
			matrix[row][i] = 0
		}
		for j := 0; j < rows; j++ {
			for col := range column {
				matrix[j][col] = 0
			}
		}
	}

	fmt.Println(fmt.Sprintf("%v", matrix))

}

func main() {
	array := [][]int{}

	array = [][]int{{0, 1}}
	fmt.Println("array=>", fmt.Sprintf("%v", array))
	setZeroes(array)
	array = [][]int{{1, 1, 1}, {1, 0, 1}, {1, 1, 1}}
	fmt.Println("array=>", fmt.Sprintf("%v", array))
	setZeroes(array)
	array = [][]int{{0, 1, 2, 0}, {3, 4, 5, 2}, {1, 3, 1, 5}}
	fmt.Println("array=>", fmt.Sprintf("%v", array))
	setZeroes(array)
}
