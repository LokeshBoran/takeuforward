package main

import (
	"fmt"
)

func merge(intervals [][]int) [][]int {

	n := len(intervals)

	/* Sort the intervals */
	for i := 0; i < n; i++ {
		for j := i + 1; j < n; j++ {
			if intervals[i][0] > intervals[j][0] {
				intervals[i], intervals[j] = intervals[j], intervals[i]
			}
		}
	}
	returnInterals := make([][]int, 0)
	newArrToAppend := []int{intervals[0][0], intervals[0][1]}
	/* Merge intervals */
	for i := 1; i < n; i++ {
		if intervals[i][0] <= newArrToAppend[1] {
			newArrToAppend[1] = max(intervals[i][1], newArrToAppend[1])
		} else {
			returnInterals = append(returnInterals, newArrToAppend)
			newArrToAppend = []int{intervals[i][0], intervals[i][1]}
		}
	}
	returnInterals = append(returnInterals, newArrToAppend)

	return returnInterals
}

func main() {

	intervals := [][]int{{2, 6}, {1, 3}, {8, 10}, {15, 18}}
	fmt.Println(merge(intervals)) // Expected output: [[1,6],[8,10],[15,18]]
	intervals = [][]int{{1, 4}, {4, 5}}
	fmt.Println(merge(intervals)) // Expected output: [[1,5]]
	intervals = [][]int{{1, 4}, {0, 4}}
	fmt.Println(merge(intervals)) // Expected output: [[0,4]]

}
